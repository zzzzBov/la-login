{"version":3,"sources":["serviceWorker.ts","hooks/useField.ts","components/Greeting.tsx","components/fields/PasswordField.tsx","components/fields/SubmitButton.tsx","components/fields/TextField.tsx","validators/matches.ts","validators/maxLength.ts","validators/minLength.ts","validators/required.ts","components/LoginForm.tsx","components/Page.tsx","components/validation/ValidationItem.tsx","components/validation/ValidationList.tsx","components/RegistrationForm.tsx","index.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","ActionTypes","Greeting","onLogOut","username","heading","useRef","useEffect","current","focus","className","ref","tabIndex","type","onClick","PasswordField","children","id","invalid","label","name","onBlur","onChange","value","internalOnChange","useCallback","e","currentTarget","mod","htmlFor","aria-live","aria-describedby","undefined","SubmitButton","TextField","fieldReducer","state","action","CLEAN","dirty","RESET","payload","SET","TOUCH","useField","validators","initialValue","useReducer","dispatch","clean","reset","set","createSetAction","touch","validationEntries","Object","entries","map","validator","validation","fromEntries","valid","every","error","matches","regex","test","maxLength","length","minLength","required","LoginForm","onSubmit","password","internalOnSubmit","preventDefault","method","Page","ValidationItem","role","aria-label","aria-hidden","ValidationList","RegistrationForm","available","max","min","lowercase","numbers","uppercase","confirmation","ReactDOM","render","useState","setUsername","tab","setTab","loginMessage","setLoginMessage","onLogin","onRegister","index","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.426f262b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import fromEntries from 'fromentries'\r\n\r\nimport {\r\n  useCallback,\r\n  useReducer,\r\n  Reducer\r\n} from 'react'\r\n\r\ninterface IValidators<Value> {\r\n  [validator: string]: (value: Value) => boolean\r\n}\r\n\r\ntype FieldValidation<Value, Validators extends IValidators<Value>> = {\r\n  [V in keyof Validators]: boolean\r\n}\r\n\r\ninterface IFieldData<Value, Validators extends IValidators<Value>> {\r\n  clean (): void\r\n  dirty: boolean\r\n  error: boolean\r\n  reset (): void\r\n  set (value: Value): void\r\n  touch (): void\r\n  valid: boolean\r\n  validation: FieldValidation<Value, Validators>\r\n  value: Value\r\n}\r\n\r\ninterface IFieldState<Value> {\r\n  dirty: boolean\r\n  value: Value\r\n}\r\n\r\nenum ActionTypes {\r\n  CLEAN = 'CLEAN',\r\n  RESET = 'RESET',\r\n  SET = 'SET',\r\n  TOUCH = 'TOUCH'\r\n}\r\n\r\ninterface IAction<\r\n  Type extends string = string,\r\n  Payload = undefined,\r\n  Meta = undefined\r\n  > {\r\n  error?: boolean\r\n  meta?: Meta\r\n  payload?: Payload\r\n  type: Type\r\n}\r\n\r\ninterface ICleanAction extends IAction<ActionTypes.CLEAN> {}\r\ninterface IResetAction<Value> extends IAction<ActionTypes.RESET, Value> {}\r\ninterface ISetAction<Value> extends IAction<ActionTypes.SET, Value> {}\r\ninterface ITouchAction extends IAction<ActionTypes.TOUCH> {}\r\n\r\ntype Action<Value> =\r\n  ICleanAction\r\n  | IResetAction<Value>\r\n  | ISetAction<Value>\r\n  | ITouchAction\r\n\r\nconst fieldReducer = <Value>(state: IFieldState<Value>, action: Action<Value>): IFieldState<Value> => {\r\n  switch (action.type) {\r\n    case ActionTypes.CLEAN:\r\n      return {\r\n        ...state,\r\n        dirty: false\r\n      }\r\n    case ActionTypes.RESET:\r\n      return {\r\n        dirty: false,\r\n        value: action.payload != null ? action.payload : state.value\r\n      }\r\n    case ActionTypes.SET:\r\n      return {\r\n        ...state,\r\n        value: action.payload != null ? action.payload : state.value\r\n      }\r\n    case ActionTypes.TOUCH:\r\n      return {\r\n        ...state,\r\n        dirty: true\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst createCleanAction = (): ICleanAction => ({\r\n  type: ActionTypes.CLEAN\r\n})\r\n\r\nconst createResetAction = <Value>(initial: Value): IResetAction<Value> => ({\r\n  payload: initial,\r\n  type: ActionTypes.RESET\r\n})\r\n\r\nconst createSetAction = <Value>(value: Value): ISetAction<Value> => ({\r\n  payload: value,\r\n  type: ActionTypes.SET\r\n})\r\n\r\nconst createTouchAction = (): ITouchAction => ({\r\n  type: ActionTypes.TOUCH\r\n})\r\n\r\nexport const useField = <Value, Validators extends IValidators<Value>>(validators: Validators, initialValue: Value): IFieldData<Value, Validators> => {\r\n  const [\r\n    {\r\n      dirty,\r\n      value\r\n    },\r\n    dispatch\r\n  ] = useReducer<Reducer<IFieldState<Value>, Action<Value>>>(fieldReducer, {\r\n    dirty: false,\r\n    value: initialValue\r\n  })\r\n\r\n  const clean = useCallback(() => {\r\n    dispatch(createCleanAction())\r\n  }, [])\r\n\r\n  const reset = useCallback(() => {\r\n    dispatch(createResetAction(initialValue))\r\n  }, [initialValue])\r\n\r\n  const set = useCallback((value: Value) => {\r\n    dispatch(createSetAction(value))\r\n  }, [])\r\n\r\n  const touch = useCallback(() => {\r\n    dispatch(createTouchAction())\r\n  }, [])\r\n\r\n  const validationEntries = \r\n    Object\r\n      .entries(validators)\r\n      .map(([key, validator]) => [key, validator(value)])\r\n\r\n  const validation = fromEntries(validationEntries)\r\n\r\n  const valid = validationEntries.every(([key, valid]) => valid)\r\n\r\n  const error = dirty && !valid\r\n\r\n  return {\r\n    clean,\r\n    dirty,\r\n    error,\r\n    reset,\r\n    set,\r\n    touch,\r\n    valid,\r\n    validation,\r\n    value\r\n  }\r\n}","import React, { FC, useRef, useEffect } from 'react'\r\n\r\nexport interface IGreetingProps {\r\n  onLogOut (): void\r\n  username: string\r\n}\r\n\r\nexport const Greeting: FC<IGreetingProps> = ({\r\n  onLogOut,\r\n  username\r\n}) => {\r\n  const heading = useRef<HTMLHeadingElement>(null)\r\n\r\n  useEffect(() => {\r\n    if (heading.current) {\r\n      heading.current.focus()\r\n    }\r\n  }, [heading])\r\n\r\n  return (\r\n    <div className='Greeting'>\r\n      <h1 ref={heading} tabIndex={-1}>Welcome {username}!</h1>\r\n      <button className='Greeting_logOut' type='button' onClick={onLogOut}>Log Out</button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { FC, FormEvent, useCallback } from 'react'\r\n\r\nexport interface IPasswordFieldProps {\r\n  id: string\r\n  invalid?: boolean\r\n  label: string\r\n  name: string\r\n  onBlur?(): void\r\n  onChange (value: string): void\r\n  value: string\r\n}\r\n\r\nexport const PasswordField: FC<IPasswordFieldProps> = ({\r\n  children,\r\n  id,\r\n  invalid,\r\n  label,\r\n  name,\r\n  onBlur,\r\n  onChange,\r\n  value\r\n}) => {\r\n  const internalOnChange = useCallback((e: FormEvent<HTMLInputElement>) => {\r\n    onChange(e.currentTarget.value)\r\n  }, [onChange])\r\n\r\n  const mod =\r\n    invalid\r\n      ? 'invalid'\r\n      : 'valid'\r\n\r\n  return (\r\n    <div className={`PasswordField PasswordField-${mod}`} id={id}>\r\n      <label className={`PasswordField_label PasswordField-${mod}_label`} htmlFor={`${id}_input`}>\r\n        { label }:\r\n      </label>\r\n      { children && (\r\n        <div className={`PasswordField_description PasswordField-${mod}_description`} id={`${id}_description`} aria-live='polite'>\r\n          { children }\r\n        </div>\r\n      )}\r\n      <input\r\n        aria-describedby={children ? `${id}_description` : undefined}\r\n        className={`PasswordField_input PasswordField-${mod}_input`}\r\n        id={`${id}_input`}\r\n        name={name}\r\n        onBlur={onBlur}\r\n        onChange={internalOnChange}\r\n        type='password'\r\n        value={value}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React, { FC } from 'react'\r\n\r\nexport interface ISubmitButtonProps { }\r\n\r\nexport const SubmitButton: FC<ISubmitButtonProps> = ({\r\n  children\r\n}) => (\r\n  <button className='SubmitButton' type='submit'>\r\n    { children }\r\n  </button>\r\n)\r\n","import React, { FC, FormEvent, useCallback } from 'react'\r\n\r\nexport interface ITextFieldProps {\r\n  id: string\r\n  invalid?: boolean,\r\n  label: string\r\n  name: string\r\n  onBlur?(): void\r\n  onChange(value: string): void\r\n  value: string\r\n}\r\n\r\nexport const TextField: FC<ITextFieldProps> = ({\r\n  children,\r\n  id,\r\n  invalid,\r\n  label,\r\n  name,\r\n  onBlur,\r\n  onChange,\r\n  value\r\n}) => {\r\n  const internalOnChange = useCallback((e: FormEvent<HTMLInputElement>) => {\r\n    onChange(e.currentTarget.value)\r\n  }, [onChange])\r\n\r\n  const mod =\r\n    invalid\r\n      ? 'invalid'\r\n      : 'valid'\r\n\r\n  return (\r\n    <div className={`TextField TextField-${mod}`} id={id}>\r\n      <label className={`TextField_label TextField-${mod}_label`} htmlFor={`${id}_input`}>\r\n        { label }:\r\n      </label>\r\n      { children && (\r\n        <div className={`TextField_description TextField-${mod}_description`} id={`${id}_description`} aria-live='polite'>\r\n          { children }\r\n        </div>\r\n      )}\r\n      <input\r\n        aria-describedby={children ? `${id}_description` : undefined}\r\n        className={`TextField_input TextField-${mod}_input`}\r\n        id={`${id}_input`}\r\n        name={name}\r\n        onBlur={onBlur}\r\n        onChange={internalOnChange}\r\n        type='text'\r\n        value={value}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","export const matches =\r\n  (regex: RegExp) =>\r\n    (value?: string) =>\r\n      value != null\r\n        ? regex.test(value)\r\n        : false\r\n","export const maxLength =\r\n  (length: number) =>\r\n    (value: string) =>\r\n      value.length <= length\r\n","export const minLength =\r\n  (length: number) =>\r\n    (value: string) =>\r\n      value.length >= length\r\n","export const required = <T>(value?: T) => Boolean(value)\r\n","import React, { useCallback, FormEvent } from 'react'\r\n\r\nimport {\r\n  PasswordField,\r\n  SubmitButton,\r\n  TextField\r\n} from './fields'\r\n\r\nimport {\r\n  useField\r\n} from '../hooks'\r\n\r\nimport {\r\n  required\r\n} from '../validators'\r\n\r\nexport interface ILoginFormProps {\r\n  onSubmit (username: string, password: string): void\r\n}\r\n\r\nexport const LoginForm: React.FC<ILoginFormProps> = ({\r\n  children,\r\n  onSubmit\r\n}) => {\r\n  const username = useField({\r\n    required\r\n  }, '')\r\n\r\n  const password = useField({\r\n    required\r\n  }, '')\r\n\r\n  const internalOnSubmit = useCallback((e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    username.touch()\r\n    password.touch()\r\n\r\n    if (username.valid && password.valid) {\r\n      onSubmit(username.value, password.value)\r\n    }\r\n  }, [onSubmit, username, password])\r\n\r\n  return (\r\n    <form className='LoginForm' method='POST' onSubmit={internalOnSubmit}>\r\n      { children && (\r\n        <div className='LoginForm_message' aria-live='assertive'>\r\n          { children }\r\n        </div>\r\n      ) }\r\n\r\n      <div className='LoginForm_username'>\r\n        <TextField\r\n          id='login-username'\r\n          invalid={username.error}\r\n          label='Username'\r\n          name='username'\r\n          onBlur={username.touch}\r\n          onChange={username.set}\r\n          value={username.value}\r\n        >\r\n          { username.dirty && !username.validation.required && (\r\n            <p>Username is required</p>\r\n          ) }\r\n        </TextField>\r\n      </div>\r\n      <div className='LoginForm_password'>\r\n        <PasswordField\r\n          id='login-password'\r\n          invalid={password.error}\r\n          label='Password'\r\n          name='password'\r\n          onBlur={password.touch}\r\n          onChange={password.set}\r\n          value={password.value}\r\n        >\r\n          { password.dirty && !password.validation.required && (\r\n            <p>Password is required</p>\r\n          ) }\r\n        </PasswordField>\r\n      </div>\r\n      <div className='LoginForm_submit'>\r\n        <SubmitButton>Log In</SubmitButton>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport interface IPageProps { }\r\n\r\nexport const Page: React.FC<IPageProps> = ({\r\n  children\r\n}) => (\r\n  <main className='Page'>\r\n    {children}\r\n  </main>\r\n)\r\n","import React, { FC } from \"react\";\r\n\r\nexport interface IValidationItemProps {\r\n  valid: boolean\r\n}\r\n\r\nexport const ValidationItem: FC<IValidationItemProps> = ({\r\n  children,\r\n  valid\r\n}) => (\r\n  <li className={`ValidationItem ValidationItem-${valid ? 'valid' : 'invalid'}`}>\r\n    {valid ? (\r\n      <span role='img' aria-label='checked'><span aria-hidden='true'>✔</span></span>\r\n    ) : (\r\n      <span role='img' aria-label='unchecked'><span aria-hidden='true'>✖</span></span>\r\n    ) }\r\n    { ' ' }\r\n    {valid ? (\r\n      <s>{ children }</s>\r\n    ) : (\r\n      <>{ children }</>\r\n    )}\r\n  </li>\r\n)\r\n","import React, { FC } from 'react'\r\n\r\nexport interface IValidationListProps {}\r\n\r\nexport const ValidationList: FC<IValidationListProps> = ({\r\n  children\r\n}) => (\r\n  <ul className='ValidationList'>\r\n    {children}\r\n  </ul>\r\n)\r\n","import React, { FormEvent, useCallback } from 'react'\r\n\r\nimport {\r\n  PasswordField,\r\n  SubmitButton,\r\n  TextField\r\n} from './fields'\r\n\r\nimport {\r\n  ValidationItem,\r\n  ValidationList\r\n} from './validation'\r\n\r\nimport {\r\n  useField\r\n} from '../hooks'\r\n\r\nimport {\r\n  matches,\r\n  maxLength,\r\n  minLength\r\n} from '../validators'\r\n\r\nexport interface IRegistrationFormProps {\r\n  onSubmit (username: string, password: string): void\r\n}\r\n\r\nexport const RegistrationForm: React.FC<IRegistrationFormProps> = ({\r\n  onSubmit\r\n}) => {\r\n  const username = useField({\r\n    available (value: string) {\r\n      return value !== 'level'\r\n    },\r\n    max: maxLength(20),\r\n    min: minLength(3),\r\n  }, '')\r\n\r\n  const password = useField({\r\n    lowercase: matches(/[a-z]/),\r\n    max: maxLength(100),\r\n    min: minLength(8),\r\n    numbers: matches(/\\d/),\r\n    uppercase: matches(/[A-Z]/)\r\n  }, '')\r\n\r\n  const confirmation = useField({\r\n    matches (value) {\r\n      return value === password.value\r\n    }\r\n  }, '')\r\n\r\n  const internalOnSubmit = useCallback((e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    username.touch()\r\n    password.touch()\r\n    confirmation.touch()\r\n\r\n    if (username.valid && password.valid && confirmation.valid) {\r\n      onSubmit(username.value, password.value)\r\n    }\r\n  }, [onSubmit, username, password, confirmation])\r\n\r\n  return (\r\n    <form className='RegistrationForm' method='POST' onSubmit={internalOnSubmit}>\r\n      <div className='RegistrationForm_username'>\r\n        <TextField\r\n          id='registration-username'\r\n          invalid={username.error}\r\n          label='Username'\r\n          name='username'\r\n          onBlur={username.touch}\r\n          onChange={username.set}\r\n          value={username.value}\r\n        >\r\n          <ValidationList>\r\n            <ValidationItem valid={username.validation.min && username.validation.max}>\r\n              Usernames must be between 3 and 20 characters long.\r\n            </ValidationItem>\r\n          </ValidationList>\r\n          {!username.validation.available && (\r\n            <p>That username is not available.</p>\r\n          )}\r\n        </TextField>\r\n      </div>\r\n      <div className='RegistrationForm_password'>\r\n        <PasswordField\r\n          id='registration-password'\r\n          invalid={password.error}\r\n          label='Password'\r\n          name='password'\r\n          onBlur={password.touch}\r\n          onChange={password.set}\r\n          value={password.value}>\r\n          <p>Passwords must:</p>\r\n          <ValidationList>\r\n            <ValidationItem valid={password.validation.uppercase}>\r\n              include an uppercase letter\r\n            </ValidationItem>\r\n            <ValidationItem valid={password.validation.lowercase}>\r\n              include a lowercase letter\r\n            </ValidationItem>\r\n            <ValidationItem valid={password.validation.numbers}>\r\n              include a number\r\n            </ValidationItem>\r\n            <ValidationItem valid={password.validation.min}>\r\n              be at least 8 characters long\r\n            </ValidationItem>\r\n          </ValidationList>\r\n        </PasswordField>\r\n      </div>\r\n      <div className='RegistrationForm_confirmation'>\r\n        <PasswordField\r\n          id='registration-confirmation'\r\n          invalid={confirmation.error}\r\n          label='Confirm Password'\r\n          name='confirm'\r\n          onBlur={confirmation.touch}\r\n          onChange={confirmation.set}\r\n          value={confirmation.value}>\r\n          <ValidationList>\r\n            <ValidationItem valid={confirmation.validation.matches}>\r\n              Password and confirmation must match\r\n            </ValidationItem>\r\n          </ValidationList>\r\n        </PasswordField>\r\n      </div>\r\n      <div className='RegistrationForm_submit'>\r\n        <SubmitButton>Register</SubmitButton>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport './scss/styles.scss';\n\nimport { App } from './App'\n\nReactDOM.render(\n  <App />,\n  document.querySelector('.Root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { useState, useCallback } from 'react'\r\nimport {\r\n  Tabs,\r\n  TabList,\r\n  Tab,\r\n  TabPanels,\r\n  TabPanel\r\n} from '@reach/tabs'\r\n\r\nimport {\r\n  Greeting,\r\n  LoginForm,\r\n  Page,\r\n  RegistrationForm\r\n} from './components'\r\n\r\nexport interface IAppProps { }\r\n\r\nexport const App: React.FC<IAppProps> = () => {\r\n  const [username, setUsername] = useState('')\r\n\r\n  const [tab, setTab] = useState(0)\r\n\r\n  const [loginMessage, setLoginMessage] = useState('')\r\n\r\n  const onLogin = useCallback((username, password) => {\r\n    if (username === 'level' && password === 'Access123') {\r\n      setLoginMessage('')\r\n      setUsername(username)\r\n    } else {\r\n      setLoginMessage('Your username or password was incorrect.')\r\n    }\r\n  }, [])\r\n\r\n  const onRegister = useCallback((username, password) => {\r\n    setUsername(username)\r\n  }, [])\r\n  \r\n  return (\r\n    <Page>\r\n      { username ? (\r\n        <Greeting username={username} onLogOut={() => setUsername('')} />\r\n      ) : (\r\n        <Tabs className='Tabs' index={tab} onChange={setTab}>\r\n          <TabList className='TabList'>\r\n            <Tab className={`Tab Tab-${tab === 0 ? 'active' : 'inactive'}`}>\r\n              Log in\r\n              </Tab>\r\n            <Tab className={`Tab Tab-${tab === 1 ? 'active' : 'inactive'}`}>\r\n              Register\r\n              </Tab>\r\n          </TabList>\r\n          <TabPanels className='TabPanels'>\r\n            <TabPanel className='TabPanel'>\r\n              <h1>Log In</h1>\r\n              <LoginForm onSubmit={onLogin}>\r\n                {loginMessage && (\r\n                  <p>{loginMessage}</p>\r\n                )}\r\n              </LoginForm>\r\n            </TabPanel>\r\n            <TabPanel className='TabPanel'>\r\n              <h1>Register</h1>\r\n              <RegistrationForm onSubmit={onRegister} />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      ) }\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}